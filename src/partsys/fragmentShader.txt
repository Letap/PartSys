#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 lightDirection;
in vec3 toCameraVector;
in float visibility;

out vec4 outputColour;

uniform sampler2D textureSampler;
uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

void main(void){

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLight = normalize(lightDirection);
	
	float product = dot(unitNormal, unitLight);
	float brightness = max(product,0.2);
	vec3 diffuse = brightness * lightColour;
	
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = -unitLight;
	vec3 reflected = reflect(lightDirection, unitNormal);
	
	float specular = dot(reflected, unitVectorToCamera);
	specular = max(specular,0);
	float dampedSpecular = pow(specular,shineDamper);
	vec3 finalSpecular = dampedSpecular * lightColour;
	
	vec4 textureColour = texture(textureSampler,pass_textureCoords);

	outputColour = textureColour.a * vec4(diffuse,1) * textureColour + vec4(finalSpecular,1.0);
	outputColour = mix(vec4(skyColour,1.0),outputColour,visibility);
	
}