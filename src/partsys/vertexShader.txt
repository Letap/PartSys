#version 400 core

in vec3 position;
in vec2 textureCoords;
in vec3 normal;

out vec2 pass_textureCoords;
out vec3 surfaceNormal;
out vec3 lightDirection;
out vec3 toCameraVector;
out float visibility;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition;

uniform float useFakeLighting;

const float density = 0.01;
const float gradient = 1.9;

void main(void){

	vec4 worldPos = transformationMatrix * vec4(position.x, position.y, position.z, 1.0);
	vec4 positionRelativeToCam = viewMatrix * worldPos;
	
	gl_Position =projectionMatrix * viewMatrix * worldPos;
	pass_textureCoords = textureCoords;
	
	vec3 actualNormal = normal;
	if(useFakeLighting > 0.5){
		actualNormal = vec3(0.0,1.0,0.0);
	}
	
	surfaceNormal = (transformationMatrix * vec4(actualNormal,0.0)).xyz;
	lightDirection = (lightPosition - worldPos).xyz;
	vec3 vm =  (viewMatrix * vec4(0.0,0.0,0.0,1.0)).xyz;
	toCameraVector = -vm - worldPos.xyz;
	
	float distance = length(positionRelativeToCam.xyz);
	visibility = exp(-pow((distance*density),gradient));
	visibility = clamp(visibility,0.0,1.0);
}